package com.rohit;

import java.rmi.server.UnicastRemoteObject;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;

/*
Supplier<T> 		() 		-> T get()
Consumer<T> 		T 		-> void accept()
BiConsumer<T,U> 	(T,U) 	-> void accept()
Function<T,R> 		T 		-> R apply()
BiFunction<T,U,R> 	(T,U) 	-> R apply()
Predicate<T> 		T 		-> boolean test()
BiPredicate<T,U> 	(T,U) 	-> boolean test()
UnaryOperator<T> 	T 		-> T identity()
BinaryOperator<T> 	(T,T) 	-> T apply()
*/

public class FunctionalInterfaces {

	public static void main(String[] args) {
		Supplier<String> s = () -> "Bangalore".toString();
	    System.out.println("Value of S: " + s.get());
	    
	    Supplier<Integer> s2 = () -> "Patna".length();
	    System.out.println("Length: " + s2.get());

	    Consumer<String> con1 = x -> System.out.println(x);
	    con1.accept("Hello World");
	    
	    //Consumer<Integer> con2 = x -> x + x;
	    
	    BiConsumer<Integer, Integer> bic = (x, y) -> FunctionalInterfaces.sum(x, y);
	    bic.accept(10, 20);
	    
	    Function<String, String> func1 = x -> x.length() + "";
	    System.out.println("Length: " + func1.apply("Rohit Singh"));
	    
	    Function<Integer, Integer> func2 = x -> FunctionalInterfaces.add10(x);
	    System.out.println("Value of add10: " + func2.apply(10));
	    
	    //Q: Write a Function lambda to convert string to upper case, and lower case
	    
	    UnaryOperator<String> str = x -> x.toLowerCase();
	    System.out.println(str.apply("ROHIT"));
	    
	    BinaryOperator<Integer> biop = (x, y) -> x + y;
	    System.out.println("BiOp: " + biop.apply(10, 20));
	}
	
	public static void sum(Integer x, Integer y) {
		System.out.println("Sum of BiConsumer: " + (x + y));
	}
	
	public static Integer add10(Integer x) {
		return x + 10;
	}
}
